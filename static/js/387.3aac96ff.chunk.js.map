{"version":3,"file":"static/js/387.3aac96ff.chunk.js","mappings":"gMAEaA,E,QAAgBC,GAAAA,IAAH,yE,SCCbC,EAAS,kBACpB,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,MACNC,SAAS,KAPO,C,iJCDTC,EAAgBP,EAAAA,GAAAA,GAAH,yFAMbQ,EAAgBR,EAAAA,GAAAA,GAAH,uI,SCiC1B,EAjCgB,WACZ,IAAQS,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACDP,IAILQ,EAAAA,EAAAA,IAZS,SAYmBR,GACvBS,MAAK,SAAAC,GACFJ,EAAWI,EAAKC,QACnB,IACAC,MAAMC,EAAAA,IACNC,SAAQ,kBAAMV,GAAW,EAAjB,GAChB,GAAE,CAACJ,KAEG,iCACH,wBAAI,aACHG,IAAW,SAACX,EAAA,EAAD,IACQ,IAAnBa,EAAQU,QACL,SAACjB,EAAD,UACKO,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACT,UAACpB,EAAD,YACI,0BAAG,uBAAG,YAAW,IAAEmB,MACnB,uBAAIC,MAFYF,EADX,OAMjB,uBAAG,sDAEd,C,6PCpCKG,EAAM,+BACNC,EAAM,mCACCC,EAAkB,CAC7BC,SAAU,gBACVC,QAAS,IACT5B,MAAO,QACP6B,SAAU,QAGL,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,gFACGC,EADH,UACYR,GADZ,OACkBO,EADlB,oBACsCN,GADtC,SAEoBQ,EAAAA,EAAAA,IAAUD,GAF9B,cAEGE,EAFH,yBAGIA,EAASpB,MAHb,kEAMA,SAAeqB,EAAtB,iDAAO,OAAP,oBAAO,WAAiCJ,EAAUK,GAA3C,gFACGJ,EADH,UACYR,GADZ,OACkBO,EADlB,oBACsCN,EADtC,kBACmDW,GADnD,SAEoBH,EAAAA,EAAAA,IAAUD,GAF9B,cAEGE,EAFH,yBAGIA,EAASpB,MAHb,kEAMA,SAAeuB,EAAtB,iDAAO,OAAP,oBAAO,WAAiCN,EAAU3B,GAA3C,gFACG4B,EADH,UACYR,GADZ,OACkBO,EADlB,YAC8B3B,EAD9B,oBACiDqB,GADjD,SAEoBQ,EAAAA,EAAAA,IAAUD,GAF9B,cAEGE,EAFH,yBAGIA,EAASpB,MAHb,kEAMA,SAAewB,EAAtB,iDAAO,OAAP,oBAAO,WAA8BP,EAAU3B,GAAxC,gFACG4B,EADH,UACYR,GADZ,OACkBO,EADlB,YAC8B3B,EAD9B,4BACyDqB,GADzD,SAEoBQ,EAAAA,EAAAA,IAAUD,GAF9B,cAEGE,EAFH,yBAGIA,EAASpB,MAHb,kEAMA,SAAeF,EAAtB,iDAAO,OAAP,oBAAO,WAAiCmB,EAAU3B,GAA3C,gFACG4B,EADH,UACYR,GADZ,OACkBO,EADlB,YAC8B3B,EAD9B,4BACyDqB,GADzD,SAEoBQ,EAAAA,EAAAA,IAAUD,GAF9B,cAEGE,EAFH,yBAGIA,EAASpB,MAHb,kEAMA,SAASG,IACZsB,EAAAA,OAAAA,QAAe,6EAA8Eb,EAChG,C","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const WrapperLoader = styled.div`\n    text-align: center;\n    margin-top: 150px;\n`;","import { RotatingLines } from 'react-loader-spinner';\nimport { WrapperLoader } from './Loader.styled';\n\nexport const Loader = () => (\n  <WrapperLoader>\n    <RotatingLines\n      strokeColor=\"blue\"\n      strokeWidth=\"5\"\n      animationDuration=\"0.75\"\n      width=\"120\"\n      visible={true}\n    />\n  </WrapperLoader>\n);","import styled from 'styled-components';\n\nexport const UlReviewStyle = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n`;\n\nexport const LiReviewStyle = styled.li`\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    max-height: 300px;\n    overflow-y: auto;\n`;","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\"\nimport { fetchMovieReviews, onFetchError } from \"services/api\";\nimport { Loader } from \"../Loader/Loader\";\nimport { LiReviewStyle, UlReviewStyle } from \"./Reviews.styled\";\n\nconst endPoint = '/movie';\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [loading, setLoading] = useState(true);\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        if (!movieId) {\n            return;\n        };\n\n        fetchMovieReviews(endPoint, movieId)\n            .then(data => {\n                setReviews(data.results);\n            })\n            .catch(onFetchError)\n            .finally(() => setLoading(false));\n    }, [movieId]);\n\n    return <>\n        <h3>Reviews:</h3>\n        {loading && <Loader />}\n        {reviews.length !== 0 ?\n            <UlReviewStyle>\n                {reviews.map(({ id, author, content }) =>\n                    <LiReviewStyle key={id}>\n                        <p><b>Author:</b> {author}</p>\n                        <p>{content}</p>\n                    </LiReviewStyle>)}\n            </UlReviewStyle> :\n            <p>Sorry! We don't have any reviews for this movie</p>}\n    </>\n};\n\nexport default Reviews;","import axios from \"axios\";\nimport { Notify } from \"notiflix\";\n\nconst URL = \"https://api.themoviedb.org/3\";\nconst KEY = \"13b0b106d3860aa17f500bd5bf9a1afe\";\nexport const paramsForNotify = {\n  position: 'center-center',\n  timeout: 3000,\n  width: '400px',\n  fontSize: '24px'\n};\n\nexport async function fetchMovies(endPoint) {\n    const url = `${URL}${endPoint}?api_key=${KEY}`\n    const response = await axios.get(url);\n    return response.data;\n};\n\nexport async function fetchSearchMovies(endPoint, query) {\n    const url = `${URL}${endPoint}?api_key=${KEY}&query=${query}`\n    const response = await axios.get(url);\n    return response.data;\n};\n\nexport async function fetchMovieDetails(endPoint, movieId) {\n    const url = `${URL}${endPoint}/${movieId}?api_key=${KEY}`\n    const response = await axios.get(url);\n    return response.data;\n};\n\nexport async function fetchMovieCast(endPoint, movieId) {\n    const url = `${URL}${endPoint}/${movieId}/credits?api_key=${KEY}`\n    const response = await axios.get(url);\n    return response.data;\n};\n\nexport async function fetchMovieReviews(endPoint, movieId) {\n    const url = `${URL}${endPoint}/${movieId}/reviews?api_key=${KEY}`\n    const response = await axios.get(url);\n    return response.data;\n};\n\nexport function onFetchError() {\n    Notify.failure('Oops! Something went wrong! Try reloading the page or make another choice!', paramsForNotify);\n};\n"],"names":["WrapperLoader","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","UlReviewStyle","LiReviewStyle","movieId","useParams","useState","loading","setLoading","reviews","setReviews","useEffect","fetchMovieReviews","then","data","results","catch","onFetchError","finally","length","map","id","author","content","URL","KEY","paramsForNotify","position","timeout","fontSize","fetchMovies","endPoint","url","axios","response","fetchSearchMovies","query","fetchMovieDetails","fetchMovieCast","Notify"],"sourceRoot":""}